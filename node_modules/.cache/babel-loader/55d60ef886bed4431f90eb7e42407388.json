{"ast":null,"code":"var _jsxFileName = \"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Easy.jsx\",\n    _s2 = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { shallowEqual, useDispatch } from 'react-redux';\nimport './Easy.css';\nimport Square from './Square';\nimport InputBox from './InputBox';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Easy(props) {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const dispatch = useDispatch();\n\n  function getWord() {\n    const action = {\n      type: 'EASY' // type: setDifficulty\n      // level: 'easy'\n\n    };\n    dispatch(action);\n  }\n\n  function getWordFromState(state) {\n    return state.word;\n  } // Get Guess Array\n\n\n  function getWordFromHistory(state) {\n    return state.history;\n  } //const currArray = getWordFromHistory();\n  //const [eachWord, setWord] = useState('');\n  // Function to check is the square should be yellow\n\n\n  function checkYellow(goalWord, guessWord, letterIndexInGuess) {\n    _s();\n\n    const [countLetterInGuessWord, setCountGuess] = useState(0);\n    const [countLetterInGoalWord, setCountGoal] = useState(0); //let countLetterInGuessWord = 0;\n    //let countLetterInGoalWord = 0;\n\n    for (let index = 0; index < 5; index++) {\n      if (guessWord[guessindex] === guessWord[letterIndexInGuess]) {\n        setCountGuess(countLetterInGuessWord + 1);\n      }\n    }\n\n    for (let goalindex = 0; goalindex < goalWord.length; goalindex++) {\n      if (goalWord[goalindex] === guessWord[letterIndexInGuess]) {\n        countLetterInGoalWord += 1;\n      }\n    }\n\n    console.log(countLetterInGuessWord);\n    console.log(countLetterInGoalWord); // Letter in guess word isn't in goal word\n\n    if (countLetterInGoalWord === 0) {\n      return false;\n    } else if (countLetterInGuessWord === countLetterInGoalWord) {\n      return true;\n    }\n\n    return false;\n  }\n\n  _s(checkYellow, \"SHWeGc46KdqjZe+yjMphdcOaLAk=\");\n\n  const randomWord = useSelector(getWordFromState, shallowEqual);\n  const guessArray = useSelector(getWordFromHistory, shallowEqual);\n  console.log(randomWord.charAt(0));\n  const wordComponents = []; // If the number of guesses is less than 7, add the guess\n\n  if (guessArray.length <= 7) {\n    for (let i = 0; i < guessArray.length; i++) {\n      const list = [];\n\n      for (let j = 0; j < guessArray[i].length; j++) {\n        if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)) {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"green\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        } else if (checkYellow(randomWord, guessArray[i], j)) {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"yellow\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        } else {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"white\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        }\n      }\n\n      wordComponents.push(list);\n    } // User tries to guess more than 7 times, nothing happens\n\n  } else {\n    for (let i = 0; i < 7; i++) {\n      const list = [];\n\n      for (let j = 0; j < guessArray[i].length; j++) {\n        if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)) {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"green\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        } else if (checkYellow(randomWord, guessArray[i], j)) {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"yellow\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        } else {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"white\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        }\n      }\n\n      wordComponents.push(list);\n    }\n  }\n\n  for (let z = 0; z < 7 - guessArray.length; z++) {\n    const blankList = [];\n\n    for (let j = 0; j < 5; j++) {\n      const component = /*#__PURE__*/_jsxDEV(Square, {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 35\n      }, this);\n\n      blankList.push(component);\n    }\n\n    wordComponents.push(blankList);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Difficulty: Easy, randomWord: \", randomWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getWord,\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"board-container\",\n      children: wordComponents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n}\n\n_s2(Easy, \"uNCM5RwNiQRKW6RaVGb3SykYY54=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Easy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Easy\");","map":{"version":3,"sources":["/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Easy.jsx"],"names":["React","useState","shallowEqual","useDispatch","Square","InputBox","useSelector","Easy","props","dispatch","getWord","action","type","getWordFromState","state","word","getWordFromHistory","history","checkYellow","goalWord","guessWord","letterIndexInGuess","countLetterInGuessWord","setCountGuess","countLetterInGoalWord","setCountGoal","index","guessindex","goalindex","length","console","log","randomWord","guessArray","charAt","wordComponents","i","list","j","toUpperCase","component","push","z","blankList"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { shallowEqual, useDispatch } from 'react-redux';\n\nimport './Easy.css';\nimport Square from './Square';\nimport InputBox from'./InputBox';\nimport { useSelector } from 'react-redux';\n\nexport default function Easy(props) {\n\n    const dispatch = useDispatch();\n\n    function getWord() {\n        const action = {\n            type: 'EASY',\n            // type: setDifficulty\n            // level: 'easy'\n        }\n\n        dispatch(action);\n    }\n\n    function getWordFromState(state) {\n        return state.word;\n    }\n\n    // Get Guess Array\n    function getWordFromHistory(state) {\n            return state.history;\n    }\n\n    //const currArray = getWordFromHistory();\n    //const [eachWord, setWord] = useState('');\n\n    // Function to check is the square should be yellow\n    function checkYellow(goalWord, guessWord, letterIndexInGuess){\n        const [countLetterInGuessWord, setCountGuess] = useState(0);\n        const [countLetterInGoalWord, setCountGoal] = useState(0);\n        //let countLetterInGuessWord = 0;\n        //let countLetterInGoalWord = 0;\n        for (let index = 0; index < 5; index++){\n            if (guessWord[guessindex] === guessWord[letterIndexInGuess]){\n                setCountGuess(countLetterInGuessWord + 1);\n            }\n        }\n        for (let goalindex = 0; goalindex < goalWord.length; goalindex++){\n            if (goalWord[goalindex] === guessWord[letterIndexInGuess]){\n                countLetterInGoalWord += 1;\n            }\n        }\n        console.log(countLetterInGuessWord);\n        console.log(countLetterInGoalWord);\n\n        // Letter in guess word isn't in goal word\n        if (countLetterInGoalWord === 0) {\n            return false;\n        } else if (countLetterInGuessWord === countLetterInGoalWord){\n            return true;\n        }\n      return false;\n    }\n    const randomWord = useSelector(getWordFromState, shallowEqual);\n    const guessArray= useSelector(getWordFromHistory, shallowEqual);\n    console.log(randomWord.charAt(0));\n    const wordComponents = [];\n    // If the number of guesses is less than 7, add the guess\n    if (guessArray.length <= 7){\n        for (let i = 0; i < guessArray.length; i++){\n            const list = []\n            for (let j = 0; j < guessArray[i].length; j++){\n                if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n                    const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else if (checkYellow(randomWord, guessArray[i], j)){\n                    const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else {\n                    const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                }\n            }\n            wordComponents.push(list);\n        }\n    // User tries to guess more than 7 times, nothing happens\n    } else {\n        for (let i = 0; i < 7; i++){\n            const list = []\n            for (let j = 0; j < guessArray[i].length; j++){\n                if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n                    const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else if (checkYellow(randomWord, guessArray[i], j)){\n                    const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else {\n                    const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                }\n            }\n            wordComponents.push(list);\n        }\n    }\n\n    for (let z = 0; z < 7 - guessArray.length; z++){\n        const blankList = []\n            for (let j = 0; j < 5; j++){\n                const component = <Square color=\"white\"></Square>\n                blankList.push(component);\n            }\n            wordComponents.push(blankList);\n    } \n\n    return(\n        <div>\n            <h1>Difficulty: Easy, randomWord: {randomWord}</h1>\n            <button onClick={getWord}>Start Game</button>\n            <InputBox></InputBox>\n            <div id=\"board-container\">\n                {wordComponents}\n            </div>\n    </div>\n\n    );\n}"]},"metadata":{},"sourceType":"module"}
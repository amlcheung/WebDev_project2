{"ast":null,"code":"import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport MessageBoard from './MessageBoard';\nimport './Medium.css';\nimport Square from './Square';\nimport InputBox from './InputBox';\nexport default function Medium(props) {// const dispatch = useDispatch();\n  // function getWord() {\n  //     const action = {\n  //         type: 'MEDIUM',\n  //         attempts: 6,\n  //         // type: setDifficulty\n  //         // level: 'easy'\n  //     }\n  //     dispatch(action);\n  // }\n  // function getWordFromState(state) {\n  //     return state.word;\n  // }\n  // // Get Guess Array\n  // function getWordFromHistory(state) {\n  //         return state.history;\n  // }\n  // //const currArray = getWordFromHistory();\n  // //const [eachWord, setWord] = useState('');\n  // // Function to check is the square should be yellow\n  // function CheckYellow(goalWord, guessWord, letterIndexInGuess){\n  //     let countLetterInGuessWord = 0;\n  //     let countCorrectLetterInGuessWord = 0;\n  //     let indexesOfLetterInGuessWord = [];\n  //     let indexesOfLetterInGoalWord = [];\n  //     let countLetterInGoalWord = 0;\n  //     for (let index = 0; index < 6; index++){\n  //         if (guessWord[index] == guessWord[letterIndexInGuess]){\n  //             countLetterInGuessWord++;\n  //             indexesOfLetterInGuessWord.push(index);\n  //         }\n  //         if (goalWord[index] == guessWord[letterIndexInGuess]){\n  //             countLetterInGoalWord++;\n  //             indexesOfLetterInGoalWord.push(index);\n  //         }\n  //     }\n  //     // Count number of 'green' sqaures of given letter in given word\n  //     for (let correct = 0; correct < indexesOfLetterInGoalWord.length; correct++){\n  //         for (let lettGuess = 0; lettGuess < indexesOfLetterInGuessWord.length; lettGuess++){\n  //             if (indexesOfLetterInGoalWord[correct] == indexesOfLetterInGuessWord[lettGuess]){\n  //                 countCorrectLetterInGuessWord++;\n  //             }\n  //         }\n  //     }\n  //    if (countLetterInGuessWord === countLetterInGoalWord){\n  //         return true;\n  //     } else {\n  //         // If the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n  //         for (let yellowBlock = 0; yellowBlock < (countLetterInGoalWord - countCorrectLetterInGuessWord); yellowBlock++){\n  //             if (letterIndexInGuess == indexesOfLetterInGuessWord[yellowBlock ]){\n  //                 return true;\n  //             }\n  //         }\n  //     }\n  //     // If letter from guess word isn't in goal word OR the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n  //     return false;\n  // }\n  // const randomWord = useSelector(getWordFromState, shallowEqual);\n  // const guessArray= useSelector(getWordFromHistory, shallowEqual);\n  // const wordComponents = [];\n  // // If the number of guesses is less than 6, add the guess\n  // if (guessArray.length <= 6){\n  //     for (let i = 0; i < guessArray.length; i++){\n  //         const list = []\n  //         for (let j = 0; j < guessArray[i].length; j++){\n  //             if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n  //                 const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n  //                 list.push(component);\n  //             } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)){\n  //                 const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n  //                 list.push(component);\n  //             } else {\n  //                 const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n  //                 list.push(component);\n  //             }\n  //         }\n  //         wordComponents.push(list);\n  //     }\n  // // User tries to guess more than 6 times, nothing happens\n  // } else {\n  //     for (let i = 0; i < 6; i++){\n  //         const list = []\n  //         for (let j = 0; j < guessArray[i].length; j++){\n  //             if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n  //                 const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n  //                 list.push(component);\n  //             } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)){\n  //                 const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n  //                 list.push(component);\n  //             } else {\n  //                 const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n  //                 list.push(component);\n  //             }\n  //         }\n  //         wordComponents.push(list);\n  //     }\n  // }\n  // for (let z = 0; z < 6 - guessArray.length; z++){\n  //     const blankList = []\n  //         for (let j = 0; j < 6; j++){\n  //             const component = <Square color=\"white\"></Square>\n  //             blankList.push(component);\n  //         }\n  //         wordComponents.push(blankList);\n  // } \n  // return(\n  //     <div>\n  //         <h1>Difficulty: Medium, randomWord: {randomWord}</h1>\n  //         <div className=\"game-contents-container\">\n  //             <button className=\"button-style\" onClick={getWord}>Start Game</button>\n  //             <MessageBoard></MessageBoard>\n  //             <InputBox></InputBox>\n  //             <div id=\"board-container\">\n  //                 {wordComponents}\n  //             </div>\n  //         </div>\n  // </div>\n  // );\n}\n_c = Medium;\n\nvar _c;\n\n$RefreshReg$(_c, \"Medium\");","map":{"version":3,"sources":["/Users/ashleycheung/Desktop/WebDev_project2/src/component/Medium.jsx"],"names":["React","useState","useDispatch","useSelector","shallowEqual","MessageBoard","Square","InputBox","Medium","props"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,aAA1C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAO,cAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAoB,YAApB;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB,CAEllIuBD,M","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport MessageBoard from './MessageBoard';\n\nimport './Medium.css';\nimport Square from './Square';\nimport InputBox from'./InputBox';\n\nexport default function Medium(props) {\n\n    // const dispatch = useDispatch();\n\n    // function getWord() {\n    //     const action = {\n    //         type: 'MEDIUM',\n    //         attempts: 6,\n    //         // type: setDifficulty\n    //         // level: 'easy'\n    //     }\n    //     dispatch(action);\n    // }\n\n    // function getWordFromState(state) {\n    //     return state.word;\n    // }\n\n    // // Get Guess Array\n    // function getWordFromHistory(state) {\n    //         return state.history;\n    // }\n\n    // //const currArray = getWordFromHistory();\n    // //const [eachWord, setWord] = useState('');\n\n    // // Function to check is the square should be yellow\n    // function CheckYellow(goalWord, guessWord, letterIndexInGuess){\n    //     let countLetterInGuessWord = 0;\n    //     let countCorrectLetterInGuessWord = 0;\n    //     let indexesOfLetterInGuessWord = [];\n    //     let indexesOfLetterInGoalWord = [];\n    //     let countLetterInGoalWord = 0;\n    //     for (let index = 0; index < 6; index++){\n    //         if (guessWord[index] == guessWord[letterIndexInGuess]){\n    //             countLetterInGuessWord++;\n    //             indexesOfLetterInGuessWord.push(index);\n    //         }\n    //         if (goalWord[index] == guessWord[letterIndexInGuess]){\n    //             countLetterInGoalWord++;\n    //             indexesOfLetterInGoalWord.push(index);\n    //         }\n    //     }\n    //     // Count number of 'green' sqaures of given letter in given word\n    //     for (let correct = 0; correct < indexesOfLetterInGoalWord.length; correct++){\n    //         for (let lettGuess = 0; lettGuess < indexesOfLetterInGuessWord.length; lettGuess++){\n    //             if (indexesOfLetterInGoalWord[correct] == indexesOfLetterInGuessWord[lettGuess]){\n    //                 countCorrectLetterInGuessWord++;\n    //             }\n    //         }\n    //     }\n    \n    //    if (countLetterInGuessWord === countLetterInGoalWord){\n    //         return true;\n    //     } else {\n    //         // If the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n    //         for (let yellowBlock = 0; yellowBlock < (countLetterInGoalWord - countCorrectLetterInGuessWord); yellowBlock++){\n    //             if (letterIndexInGuess == indexesOfLetterInGuessWord[yellowBlock ]){\n    //                 return true;\n    //             }\n    //         }\n    //     }\n    //     // If letter from guess word isn't in goal word OR the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n    //     return false;\n    // }\n    // const randomWord = useSelector(getWordFromState, shallowEqual);\n    // const guessArray= useSelector(getWordFromHistory, shallowEqual);\n    // const wordComponents = [];\n    // // If the number of guesses is less than 6, add the guess\n    // if (guessArray.length <= 6){\n    //     for (let i = 0; i < guessArray.length; i++){\n    //         const list = []\n    //         for (let j = 0; j < guessArray[i].length; j++){\n    //             if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n    //                 const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n    //                 list.push(component);\n    //             } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)){\n    //                 const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n    //                 list.push(component);\n    //             } else {\n    //                 const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n    //                 list.push(component);\n    //             }\n    //         }\n    //         wordComponents.push(list);\n    //     }\n    // // User tries to guess more than 6 times, nothing happens\n    // } else {\n    //     for (let i = 0; i < 6; i++){\n    //         const list = []\n    //         for (let j = 0; j < guessArray[i].length; j++){\n    //             if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n    //                 const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n    //                 list.push(component);\n    //             } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)){\n    //                 const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n    //                 list.push(component);\n    //             } else {\n    //                 const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n    //                 list.push(component);\n    //             }\n    //         }\n    //         wordComponents.push(list);\n    //     }\n    // }\n\n    // for (let z = 0; z < 6 - guessArray.length; z++){\n    //     const blankList = []\n    //         for (let j = 0; j < 6; j++){\n    //             const component = <Square color=\"white\"></Square>\n    //             blankList.push(component);\n    //         }\n    //         wordComponents.push(blankList);\n    // } \n\n    // return(\n    //     <div>\n    //         <h1>Difficulty: Medium, randomWord: {randomWord}</h1>\n    //         <div className=\"game-contents-container\">\n    //             <button className=\"button-style\" onClick={getWord}>Start Game</button>\n    //             <MessageBoard></MessageBoard>\n    //             <InputBox></InputBox>\n    //             <div id=\"board-container\">\n    //                 {wordComponents}\n    //             </div>\n    //         </div>\n    // </div>\n    // );\n\n\n}"]},"metadata":{},"sourceType":"module"}
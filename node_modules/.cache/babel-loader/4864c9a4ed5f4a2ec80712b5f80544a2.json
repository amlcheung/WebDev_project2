{"ast":null,"code":"var _jsxFileName = \"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Easy.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { shallowEqual, useDispatch } from 'react-redux';\nimport './Easy.css';\nimport Square from './Square';\nimport InputBox from './InputBox';\nimport { useSelector } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Easy(props) {\n  _s();\n\n  const dispatch = useDispatch();\n\n  function getWord() {\n    const action = {\n      type: 'EASY' // type: setDifficulty\n      // level: 'easy'\n\n    };\n    dispatch(action);\n  }\n\n  function getWordFromState(state) {\n    return state.word;\n  } // Get Guess Array\n\n\n  function getWordFromHistory(state) {\n    debugger;\n    return state.history;\n  } //const currArray = getWordFromHistory();\n  //const [eachWord, setWord] = useState('');\n\n\n  const randomWord = useSelector(getWordFromState, shallowEqual);\n  const guessArray = useSelector(getWordFromHistory, shallowEqual);\n  console.log(guessArray);\n  const wordComponents = [];\n\n  for (let i = 0; i < guessArray.length; i++) {\n    if (guessArray[i]) {\n      const list = [];\n\n      for (let j = 0; j < guessArray[i].length; j++) {\n        //const list = []\n        const component = /*#__PURE__*/_jsxDEV(Square, {\n          square: \"square-white\",\n          letter: randomWord.charAt(j)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 35\n        }, this);\n\n        list.push(component);\n      }\n\n      wordComponents.push(list);\n    }\n  }\n  /*\n  if (randomWord){\n      const list = []\n      for (let i = 0; i < randomWord.length; i++){\n          //const list = []\n          const component = <Square square=\"square-white\" letter={randomWord.charAt(i)}></Square>\n          list.push(component);\n      }\n      wordComponents.push(list);\n  }\n  if (randomWord){\n      const list = []\n      for (let i = 0; i < randomWord.length; i++){\n          //const list = []\n          const component = <Square square=\"square-white\" letter={randomWord.charAt(i)}></Square>\n          list.push(component);\n      }\n      wordComponents.push(list);\n  }\n  */\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Difficulty: Easy, randomWord: \", randomWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getWord,\n      children: \"Start Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(InputBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"board-container\",\n      children: wordComponents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Easy, \"uNCM5RwNiQRKW6RaVGb3SykYY54=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Easy;\n\nvar _c;\n\n$RefreshReg$(_c, \"Easy\");","map":{"version":3,"sources":["/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Easy.jsx"],"names":["React","useState","shallowEqual","useDispatch","Square","InputBox","useSelector","Easy","props","dispatch","getWord","action","type","getWordFromState","state","word","getWordFromHistory","history","randomWord","guessArray","console","log","wordComponents","i","length","list","j","component","charAt","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,aAA1C;AAEA,OAAO,YAAP;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,QAAP,MAAoB,YAApB;AACA,SAASC,WAAT,QAA4B,aAA5B;;AAEA,eAAe,SAASC,IAAT,CAAcC,KAAd,EAAqB;AAAA;;AAEhC,QAAMC,QAAQ,GAAGN,WAAW,EAA5B;;AAEA,WAASO,OAAT,GAAmB;AACf,UAAMC,MAAM,GAAG;AACXC,MAAAA,IAAI,EAAE,MADK,CAEX;AACA;;AAHW,KAAf;AAMAH,IAAAA,QAAQ,CAACE,MAAD,CAAR;AACH;;AAED,WAASE,gBAAT,CAA0BC,KAA1B,EAAiC;AAC7B,WAAOA,KAAK,CAACC,IAAb;AACH,GAhB+B,CAkBhC;;;AACA,WAASC,kBAAT,CAA4BF,KAA5B,EAAmC;AAC/B;AACI,WAAOA,KAAK,CAACG,OAAb;AACP,GAtB+B,CAwBhC;AACA;;;AAGA,QAAMC,UAAU,GAAGZ,WAAW,CAACO,gBAAD,EAAmBX,YAAnB,CAA9B;AACA,QAAMiB,UAAU,GAAEb,WAAW,CAACU,kBAAD,EAAqBd,YAArB,CAA7B;AACAkB,EAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,QAAMG,cAAc,GAAG,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAAU,CAACK,MAA/B,EAAuCD,CAAC,EAAxC,EAA2C;AACvC,QAAIJ,UAAU,CAACI,CAAD,CAAd,EAAkB;AACd,YAAME,IAAI,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,UAAU,CAACI,CAAD,CAAV,CAAcC,MAAlC,EAA0CE,CAAC,EAA3C,EAA8C;AAC1C;AACA,cAAMC,SAAS,gBAAG,QAAC,MAAD;AAAQ,UAAA,MAAM,EAAC,cAAf;AAA8B,UAAA,MAAM,EAAET,UAAU,CAACU,MAAX,CAAkBF,CAAlB;AAAtC;AAAA;AAAA;AAAA;AAAA,gBAAlB;;AACAD,QAAAA,IAAI,CAACI,IAAL,CAAUF,SAAV;AACH;;AACDL,MAAAA,cAAc,CAACO,IAAf,CAAoBJ,IAApB;AACH;AACJ;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACI,sBACI;AAAA,4BACI;AAAA,mDAAmCP,UAAnC;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAER,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAK,MAAA,EAAE,EAAC,iBAAR;AAAA,gBACKY;AADL;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAWH;;GA1EuBf,I;UAEHJ,W,EA0BEG,W,EACDA,W;;;KA7BEC,I","sourcesContent":["import React, { useState } from 'react';\nimport { shallowEqual, useDispatch } from 'react-redux';\n\nimport './Easy.css';\nimport Square from './Square';\nimport InputBox from'./InputBox';\nimport { useSelector } from 'react-redux';\n\nexport default function Easy(props) {\n\n    const dispatch = useDispatch();\n\n    function getWord() {\n        const action = {\n            type: 'EASY',\n            // type: setDifficulty\n            // level: 'easy'\n        }\n\n        dispatch(action);\n    }\n\n    function getWordFromState(state) {\n        return state.word;\n    }\n\n    // Get Guess Array\n    function getWordFromHistory(state) {\n        debugger\n            return state.history;\n    }\n\n    //const currArray = getWordFromHistory();\n    //const [eachWord, setWord] = useState('');\n\n\n    const randomWord = useSelector(getWordFromState, shallowEqual);\n    const guessArray= useSelector(getWordFromHistory, shallowEqual);\n    console.log(guessArray);\n    const wordComponents = [];\n    for (let i = 0; i < guessArray.length; i++){\n        if (guessArray[i]){\n            const list = []\n            for (let j = 0; j < guessArray[i].length; j++){\n                //const list = []\n                const component = <Square square=\"square-white\" letter={randomWord.charAt(j)}></Square>\n                list.push(component);\n            }\n            wordComponents.push(list);\n        }\n    }\n    /*\n    if (randomWord){\n        const list = []\n        for (let i = 0; i < randomWord.length; i++){\n            //const list = []\n            const component = <Square square=\"square-white\" letter={randomWord.charAt(i)}></Square>\n            list.push(component);\n        }\n        wordComponents.push(list);\n    }\n    if (randomWord){\n        const list = []\n        for (let i = 0; i < randomWord.length; i++){\n            //const list = []\n            const component = <Square square=\"square-white\" letter={randomWord.charAt(i)}></Square>\n            list.push(component);\n        }\n        wordComponents.push(list);\n    }\n    */\n    return(\n        <div>\n            <h1>Difficulty: Easy, randomWord: {randomWord}</h1>\n            <button onClick={getWord}>Start Game</button>\n            <InputBox></InputBox>\n            <div id=\"board-container\">\n                {wordComponents}\n            </div>\n    </div>\n\n    );\n}"]},"metadata":{},"sourceType":"module"}
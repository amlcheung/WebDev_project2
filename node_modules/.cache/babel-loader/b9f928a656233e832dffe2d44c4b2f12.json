{"ast":null,"code":"import raw from './english3.txt'; // Initial states\n\nconst initState = {\n  word: \"\",\n  history: [],\n  invalidWordLength: false,\n  attemptsRemaining: -1,\n  invalidWord: false\n};\nconst max = 10;\nconst min = 0;\nexport function WordGeneratorReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  let dictionaryWords = [];\n  fetch(raw).then(r => r.text()).then(text => {\n    this.setState({\n      dictionaryWords: text\n    }, () => console.log(this.state.arr1));\n  });\n\n  if (action.type === 'EASY') {\n    const easyWords = [\"Cable\", \"Faces\", \"Label\", \"Nacho\", \"Wacky\", \"Yacht\", \"Adult\", \"Grass\", \"Water\", \"Tower\"];\n    let randomIndexEasy = Math.floor(Math.random() * (max - min) + min);\n    console.log(\"random selected word: \" + easyWords[randomIndexEasy]);\n    return { ...state,\n      word: easyWords[randomIndexEasy].toUpperCase(),\n      history: [],\n      attemptsRemaining: action.attempts\n    };\n  }\n\n  if (action.type === 'MEDIUM') {\n    const medWords = [\"Acting\", \"Amount\", \"Became\", \"Belief\", \"Breath\", \"Design\", \"Doctor\", \"Enable\", \"Fabric\", \"Golden\"];\n    let randomIndexMedium = Math.floor(Math.random() * (max - min) + min);\n    console.log(medWords[randomIndexMedium]);\n    return { ...state,\n      word: medWords[randomIndexMedium].toUpperCase(),\n      history: [],\n      attemptsRemaining: action.attempts\n    };\n  }\n\n  if (action.type === 'HARD') {\n    const hardWords = [\"Fuzzier\", \"Drizzle\", \"Quibble\", \"Oxidize\", \"Tickbox\", \"Complex\", \"Squeeze\", \"Jumping\", \"Quickley\", \"Eagerly\"];\n    let randomIndexHard = Math.floor(Math.random() * (max - min) + min);\n    console.log(hardWords[randomIndexHard]);\n    return { ...state,\n      word: hardWords[randomIndexHard].toUpperCase(),\n      history: [],\n      attemptsRemaining: action.attempts\n    };\n  }\n\n  if (action.type === \"EVALUATE_WORD\") {\n    console.log(\"eval function called\");\n    let newWord = action.value.toString();\n\n    if (!dictionaryWords.includes(action.value)) {\n      return { ...state,\n        invalidWord: true // attemptsRemaining: attemptsRemaining,\n\n      };\n    } // Easy\n\n\n    if (state.word.length === 5 && newWord.length === 5) {\n      // console.log(\"history array: \" + state.history);\n      // console.log(\"valid\");\n      return { ...state,\n        history: [...state.history, action.value],\n        invalidWordLength: false,\n        attemptsRemaining: state.attemptsRemaining - 1,\n        invalidWord: false\n      };\n    } // Medium\n    else if (state.word.length === 6 && newWord.length === 6) {\n      console.log(state.history);\n      return { ...state,\n        history: [...state.history, action.value],\n        invalidWordLength: false,\n        attemptsRemaining: state.attemptsRemaining - 1\n      };\n    } // Hard\n    else if (state.word.length === 7 && newWord.length === 7) {\n      console.log(state.history);\n      return { ...state,\n        history: [...state.history, action.value],\n        invalidWordLength: false,\n        attemptsRemaining: state.attemptsRemaining - 1\n      };\n    } // Not valid\n    else {\n      // Invalid! The word must be of length {state.word.length}.\n      return { ...state,\n        invalidWordLength: true // attemptsRemaining: attemptsRemaining,\n\n      };\n    }\n  } else {\n    return { ...state,\n      attemptsRemaining: state.attemptsRemaining\n    };\n  }\n\n  return state;\n}\n_c = WordGeneratorReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordGeneratorReducer\");","map":{"version":3,"sources":["/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/reducer/WordGeneratorReducer.js"],"names":["raw","initState","word","history","invalidWordLength","attemptsRemaining","invalidWord","max","min","WordGeneratorReducer","state","action","dictionaryWords","fetch","then","r","text","setState","console","log","arr1","type","easyWords","randomIndexEasy","Math","floor","random","toUpperCase","attempts","medWords","randomIndexMedium","hardWords","randomIndexHard","newWord","value","toString","includes","length"],"mappings":"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","sourcesContent":["import raw from './english3.txt';\n\n// Initial states\nconst initState = {\n    word: \"\",\n    history: [],\n    invalidWordLength: false,\n    attemptsRemaining: -1,\n    invalidWord: false,\n}\n\nconst max = 10;\nconst min = 0;\n\nexport function WordGeneratorReducer(state = initState, action) {\n    let dictionaryWords = []\n    fetch(raw)\n    .then((r) => r.text())\n    .then(text  => {\n      this.setState({\n        dictionaryWords: text\n    },()=>console.log(this.state.arr1))\n    })\n\n    if (action.type === 'EASY') {\n        const easyWords = [\"Cable\", \"Faces\", \"Label\", \"Nacho\", \"Wacky\", \n                       \"Yacht\", \"Adult\", \"Grass\", \"Water\", \"Tower\"];\n\n        let randomIndexEasy = Math.floor(Math.random() * (max - min) + min);\n\n        console.log(\"random selected word: \" + easyWords[randomIndexEasy]);\n\n        return {\n            ...state, \n            word: easyWords[randomIndexEasy].toUpperCase(),\n            history: [],\n            attemptsRemaining: action.attempts,\n\n\n        }\n    }\n\n    if (action.type === 'MEDIUM') {\n        const medWords = [\"Acting\", \"Amount\", \"Became\", \"Belief\", \"Breath\", \n                          \"Design\", \"Doctor\", \"Enable\", \"Fabric\", \"Golden\"];\n    \n\n        let randomIndexMedium = Math.floor(Math.random() * (max - min) + min);\n\n        console.log(medWords[randomIndexMedium]);\n        return {\n            ...state,\n            word: medWords[randomIndexMedium].toUpperCase(),\n            history: [],\n            attemptsRemaining: action.attempts,\n        }\n    }\n\n\n    if (action.type === 'HARD') {\n        const hardWords = [\"Fuzzier\", \"Drizzle\", \"Quibble\", \"Oxidize\", \"Tickbox\", \n                           \"Complex\", \"Squeeze\", \"Jumping\", \"Quickley\", \"Eagerly\"];\n\n        let randomIndexHard = Math.floor(Math.random() * (max - min) + min);\n\n        console.log(hardWords[randomIndexHard]);\n\n        return {\n            ...state, \n            word: hardWords[randomIndexHard].toUpperCase(),\n            history: [],\n            attemptsRemaining: action.attempts,\n        }\n\n    }\n\n\n    if (action.type === \"EVALUATE_WORD\") {\n        console.log(\"eval function called\");\n        let newWord = action.value.toString();\n\n        if (!dictionaryWords.includes(action.value)){\n            return {\n                ...state,\n                invalidWord: true,\n                // attemptsRemaining: attemptsRemaining,\n            }\n        }\n        \n        // Easy\n        if (state.word.length === 5 && newWord.length === 5){\n            // console.log(\"history array: \" + state.history);\n            // console.log(\"valid\");\n\n\n            return {\n                ...state,\n                history: [...state.history, action.value],\n                invalidWordLength: false,\n                attemptsRemaining: state.attemptsRemaining - 1,\n                invalidWord: false,\n\n            }\n        }\n        // Medium\n        else if (state.word.length === 6 && newWord.length === 6){\n            console.log(state.history);\n            return {\n                ...state,\n                history: [...state.history, action.value],\n                invalidWordLength: false,\n                attemptsRemaining: state.attemptsRemaining - 1,\n            }\n        }\n        // Hard\n        else if (state.word.length === 7 && newWord.length === 7){\n            console.log(state.history);\n            return {\n                ...state,\n                history: [...state.history, action.value],\n                invalidWordLength: false,\n                attemptsRemaining: state.attemptsRemaining - 1,\n            }\n        }\n        // Not valid\n        else {\n            // Invalid! The word must be of length {state.word.length}.\n            return {\n                ...state,\n                invalidWordLength: true,\n                // attemptsRemaining: attemptsRemaining,\n            }\n        }\n    } else {\n        return {\n            ... state,\n            attemptsRemaining: state.attemptsRemaining,\n        }\n    }\n        \n    \n    return state;\n}"]},"metadata":{},"sourceType":"module"}
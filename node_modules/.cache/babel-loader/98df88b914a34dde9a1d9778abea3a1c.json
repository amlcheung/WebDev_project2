{"ast":null,"code":"var _jsxFileName = \"/Users/ashleycheung/Desktop/WebDev_project2/src/component/Medium.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport './Medium.css';\nimport Square from './Square';\nimport InputBox from './InputBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Medium(props) {\n  _s();\n\n  const dispatch = useDispatch();\n\n  function getWord() {\n    const action = {\n      type: 'MEDIUM',\n      attempts: 6 // type: setDifficulty\n      // level: 'easy'\n\n    };\n    dispatch(action);\n  }\n\n  function getWordFromState(state) {\n    return state.word;\n  } // Get Guess Array\n\n\n  function getWordFromHistory(state) {\n    return state.history;\n  } //const currArray = getWordFromHistory();\n  //const [eachWord, setWord] = useState('');\n  // Function to check is the square should be yellow\n\n\n  function CheckYellow(goalWord, guessWord, letterIndexInGuess) {\n    let countLetterInGuessWord = 0;\n    let countCorrectLetterInGuessWord = 0;\n    let indexesOfLetterInGuessWord = [];\n    let indexesOfLetterInGoalWord = [];\n    let countLetterInGoalWord = 0;\n\n    for (let index = 0; index < 6; index++) {\n      if (guessWord[index] == guessWord[letterIndexInGuess]) {\n        countLetterInGuessWord++;\n        indexesOfLetterInGuessWord.push(index);\n      }\n\n      if (goalWord[index] == guessWord[letterIndexInGuess]) {\n        countLetterInGoalWord++;\n        indexesOfLetterInGoalWord.push(index);\n      }\n    } // Count number of 'green' sqaures of given letter in given word\n\n\n    for (let correct = 0; correct < indexesOfLetterInGoalWord.length; correct++) {\n      for (let lettGuess = 0; lettGuess < indexesOfLetterInGuessWord.length; lettGuess++) {\n        if (indexesOfLetterInGoalWord[correct] == indexesOfLetterInGuessWord[lettGuess]) {\n          countCorrectLetterInGuessWord++;\n        }\n      }\n    }\n\n    if (countLetterInGuessWord === countLetterInGoalWord) {\n      return true;\n    } else {\n      // If the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n      for (let yellowBlock = 0; yellowBlock < countLetterInGoalWord - countCorrectLetterInGuessWord; yellowBlock++) {\n        if (letterIndexInGuess == indexesOfLetterInGuessWord[yellowBlock]) {\n          return true;\n        }\n      }\n    } // If letter from guess word isn't in goal word OR the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n\n\n    return false;\n  }\n\n  const randomWord = useSelector(getWordFromState, shallowEqual);\n  const guessArray = useSelector(getWordFromHistory, shallowEqual);\n  const wordComponents = []; // If the number of guesses is less than 7, add the guess\n\n  if (guessArray.length <= 6) {\n    for (let i = 0; i < guessArray.length; i++) {\n      const list = [];\n\n      for (let j = 0; j < guessArray[i].length; j++) {\n        if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)) {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"green\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)) {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"yellow\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        } else {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"white\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        }\n      }\n\n      wordComponents.push(list);\n    } // User tries to guess more than 7 times, nothing happens\n\n  } else {\n    for (let i = 0; i < 6; i++) {\n      const list = [];\n\n      for (let j = 0; j < guessArray[i].length; j++) {\n        if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)) {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"green\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)) {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"yellow\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        } else {\n          const component = /*#__PURE__*/_jsxDEV(Square, {\n            color: \"white\",\n            letter: guessArray[i].toUpperCase().charAt(j)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 39\n          }, this);\n\n          list.push(component);\n        }\n      }\n\n      wordComponents.push(list);\n    }\n  }\n\n  for (let z = 0; z < 6 - guessArray.length; z++) {\n    const blankList = [];\n\n    for (let j = 0; j < 6; j++) {\n      const component = /*#__PURE__*/_jsxDEV(Square, {\n        color: \"white\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 35\n      }, this);\n\n      blankList.push(component);\n    }\n\n    wordComponents.push(blankList);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Difficulty: Easy, randomWord: \", randomWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-contents-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"button-style\",\n        onClick: getWord,\n        children: \"Start Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MessageBoard, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(InputBox, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"board-container\",\n        children: wordComponents\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Medium, \"uNCM5RwNiQRKW6RaVGb3SykYY54=\", true, function () {\n  return [useDispatch];\n});\n\n_c = Medium;\n\nvar _c;\n\n$RefreshReg$(_c, \"Medium\");","map":{"version":3,"sources":["/Users/ashleycheung/Desktop/WebDev_project2/src/component/Medium.jsx"],"names":["React","useState","useDispatch","Square","InputBox","Medium","props","dispatch","getWord","action","type","attempts","getWordFromState","state","word","getWordFromHistory","history","CheckYellow","goalWord","guessWord","letterIndexInGuess","countLetterInGuessWord","countCorrectLetterInGuessWord","indexesOfLetterInGuessWord","indexesOfLetterInGoalWord","countLetterInGoalWord","index","push","correct","length","lettGuess","yellowBlock","randomWord","useSelector","shallowEqual","guessArray","wordComponents","i","list","j","toUpperCase","charAt","component","z","blankList"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './Medium.css';\nimport Square from './Square';\nimport InputBox from'./InputBox';\n\nexport default function Medium(props) {\n\n    const dispatch = useDispatch();\n\n    function getWord() {\n        const action = {\n            type: 'MEDIUM',\n            attempts: 6,\n            // type: setDifficulty\n            // level: 'easy'\n        }\n        dispatch(action);\n    }\n\n    function getWordFromState(state) {\n        return state.word;\n    }\n\n    // Get Guess Array\n    function getWordFromHistory(state) {\n            return state.history;\n    }\n\n    //const currArray = getWordFromHistory();\n    //const [eachWord, setWord] = useState('');\n\n    // Function to check is the square should be yellow\n    function CheckYellow(goalWord, guessWord, letterIndexInGuess){\n        let countLetterInGuessWord = 0;\n        let countCorrectLetterInGuessWord = 0;\n        let indexesOfLetterInGuessWord = [];\n        let indexesOfLetterInGoalWord = [];\n        let countLetterInGoalWord = 0;\n        for (let index = 0; index < 6; index++){\n            if (guessWord[index] == guessWord[letterIndexInGuess]){\n                countLetterInGuessWord++;\n                indexesOfLetterInGuessWord.push(index);\n            }\n            if (goalWord[index] == guessWord[letterIndexInGuess]){\n                countLetterInGoalWord++;\n                indexesOfLetterInGoalWord.push(index);\n            }\n        }\n        // Count number of 'green' sqaures of given letter in given word\n        for (let correct = 0; correct < indexesOfLetterInGoalWord.length; correct++){\n            for (let lettGuess = 0; lettGuess < indexesOfLetterInGuessWord.length; lettGuess++){\n                if (indexesOfLetterInGoalWord[correct] == indexesOfLetterInGuessWord[lettGuess]){\n                    countCorrectLetterInGuessWord++;\n                }\n            }\n        }\n    \n       if (countLetterInGuessWord === countLetterInGoalWord){\n            return true;\n        } else {\n            // If the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n            for (let yellowBlock = 0; yellowBlock < (countLetterInGoalWord - countCorrectLetterInGuessWord); yellowBlock++){\n                if (letterIndexInGuess == indexesOfLetterInGuessWord[yellowBlock ]){\n                    return true;\n                }\n            }\n        }\n        // If letter from guess word isn't in goal word OR the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n        return false;\n    }\n    const randomWord = useSelector(getWordFromState, shallowEqual);\n    const guessArray= useSelector(getWordFromHistory, shallowEqual);\n    const wordComponents = [];\n    // If the number of guesses is less than 7, add the guess\n    if (guessArray.length <= 6){\n        for (let i = 0; i < guessArray.length; i++){\n            const list = []\n            for (let j = 0; j < guessArray[i].length; j++){\n                if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n                    const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)){\n                    const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else {\n                    const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                }\n            }\n            wordComponents.push(list);\n        }\n    // User tries to guess more than 7 times, nothing happens\n    } else {\n        for (let i = 0; i < 6; i++){\n            const list = []\n            for (let j = 0; j < guessArray[i].length; j++){\n                if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n                    const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)){\n                    const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else {\n                    const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                }\n            }\n            wordComponents.push(list);\n        }\n    }\n\n    for (let z = 0; z < 6 - guessArray.length; z++){\n        const blankList = []\n            for (let j = 0; j < 6; j++){\n                const component = <Square color=\"white\"></Square>\n                blankList.push(component);\n            }\n            wordComponents.push(blankList);\n    } \n\n    return(\n        <div>\n            <h1>Difficulty: Easy, randomWord: {randomWord}</h1>\n            <div className=\"game-contents-container\">\n                <button className=\"button-style\" onClick={getWord}>Start Game</button>\n                <MessageBoard></MessageBoard>\n                <InputBox></InputBox>\n                <div id=\"board-container\">\n                    {wordComponents}\n                </div>\n            </div>\n    </div>\n    );\n\n\n}"]},"metadata":{},"sourceType":"module"}
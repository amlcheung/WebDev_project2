{"ast":null,"code":"var _jsxFileName = \"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/MessageBoard.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport './MessageBoard.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function MessageBoard() {\n  _s();\n\n  function createMessage(state) {\n    message = \"\";\n\n    if (state.current_diff == \"EASY\" && state.easyinvalidWordLength == \"true\") {\n      message = \"Invalid Word Length\";\n    } else if (state.current_diff == \"MEDIUM\" && state.medinvalidWordLength == \"true\") {\n      message = \"Invalid Word Length\";\n    } else if (state.current_diff == \"HARD\" && state.hardinvalidWordLength == \"true\") {\n      message = \"Invalid Word Length\";\n    }\n\n    if (state.invalidWord) {\n      if (state.current_diff == \"EASY\" && state.easyinvalidWord == \"true\") {\n        message = \"Word not in dictionary\";\n      } else if (state.current_diff == \"MEDIUM\" && state.medinvalidWord == \"true\") {\n        message = \"Word not in dictionary\";\n      } else if (state.current_diff == \"HARD\" && state.hardinvalidWord == \"true\") {\n        message = \"Word not in dictionary\";\n      }\n    }\n\n    let easycurGuess = state.easy_history[state.easy_history.length - 1];\n    let medcurGuess = state.med_history[state.med_history.length - 1];\n    let hardcurGuess = state.hard_history[state.hard_history.length - 1];\n\n    if (easycurGuess !== undefined) {\n      if (state.easy_word === easycurGuess.toUpperCase()) {\n        message = \"Congratulations!  Would you like to try again?\";\n      } else if (state.easyattemptsRemaining === 0 && state.easy_word !== easycurGuess.toUpperCase()) {\n        message = \"You failed to guess the word. End of Game.\";\n      }\n    }\n\n    if (medcurGuess !== undefined) {\n      if (state.med_word === medcurGuess.toUpperCase()) {\n        message = \"Congratulations!  Would you like to try again?\";\n      } else if (state.medattemptsRemaining === 0 && state.med_word !== medcurGuess.toUpperCase()) {\n        message = \"You failed to guess the word. End of Game.\";\n      }\n    }\n\n    if (hardcurGuess !== undefined) {\n      if (state.hard_word === hardcurGuess.toUpperCase()) {\n        message = \"Congratulations!  Would you like to try again?\";\n      } else if (state.hardattemptsRemaining === 0 && state.hard_word !== easycurGuess.toUpperCase()) {\n        message = \"You failed to guess the word. End of Game.\";\n      }\n    }\n\n    return message;\n  }\n\n  const currentMessage = useSelector(createMessage, shallowEqual);\n\n  function getAttemptsRemaining(state) {\n    let attempts = \"\";\n\n    if (state.current_diff == \"EASY\") {\n      if (state.easyattemptsRemaining > 0) {\n        attempts = `Attempts Remaining: ${state.easyattemptsRemaining}`;\n      }\n    }\n\n    if (state.current_diff == \"MEDIUM\") {\n      if (state.medattemptsRemaining > 0) {\n        attempts = `Attempts Remaining: ${state.medattemptsRemaining}`;\n      }\n    }\n\n    if (state.current_diff == \"HARD\") {\n      if (state.hardattemptsRemaining > 0) {\n        attempts = `Attempts Remaining: ${state.hardattemptsRemaining}`;\n      }\n    }\n\n    return attempts;\n  }\n\n  const attemptsRemaining = useSelector(getAttemptsRemaining, shallowEqual);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"text-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Message Board: \", currentMessage]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: attemptsRemaining\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(MessageBoard, \"MYxs2UNtM0hveng/0cBtKf8Embg=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = MessageBoard;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageBoard\");","map":{"version":3,"sources":["/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/MessageBoard.jsx"],"names":["React","shallowEqual","useSelector","MessageBoard","createMessage","state","message","current_diff","easyinvalidWordLength","medinvalidWordLength","hardinvalidWordLength","invalidWord","easyinvalidWord","medinvalidWord","hardinvalidWord","easycurGuess","easy_history","length","medcurGuess","med_history","hardcurGuess","hard_history","undefined","easy_word","toUpperCase","easyattemptsRemaining","med_word","medattemptsRemaining","hard_word","hardattemptsRemaining","currentMessage","getAttemptsRemaining","attempts","attemptsRemaining"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport './MessageBoard.css';\n\n\nexport default function MessageBoard() {\n    \n\n    function createMessage(state) {\n       message = \"\";\n        \n\n        if (state.current_diff == \"EASY\" && state.easyinvalidWordLength == \"true\"){\n                message = \"Invalid Word Length\";\n        }\n        else if (state.current_diff == \"MEDIUM\" && state.medinvalidWordLength == \"true\"){\n                message = \"Invalid Word Length\";\n            }\n            else if (state.current_diff == \"HARD\" && state.hardinvalidWordLength == \"true\"){\n                message = \"Invalid Word Length\";\n            }\n    \n        if (state.invalidWord){\n            if (state.current_diff == \"EASY\" && state.easyinvalidWord == \"true\"){\n                message = \"Word not in dictionary\";\n            }\n            else if (state.current_diff == \"MEDIUM\" && state.medinvalidWord == \"true\"){\n                message = \"Word not in dictionary\";\n            }\n            else if (state.current_diff == \"HARD\" && state.hardinvalidWord == \"true\"){\n                message = \"Word not in dictionary\";\n            }\n        }\n        let easycurGuess = state.easy_history[state.easy_history.length - 1];\n        let medcurGuess = state.med_history[state.med_history.length - 1];\n        let hardcurGuess = state.hard_history[state.hard_history.length - 1];\n\n        if (easycurGuess !== undefined) {\n            if (state.easy_word === easycurGuess.toUpperCase()) {\n                message = \"Congratulations!  Would you like to try again?\";\n            } else if (state.easyattemptsRemaining === 0 && state.easy_word !== easycurGuess.toUpperCase()) {\n                message = \"You failed to guess the word. End of Game.\";\n            }\n        }\n        if (medcurGuess !== undefined) {\n            if (state.med_word === medcurGuess.toUpperCase()) {\n                message = \"Congratulations!  Would you like to try again?\";\n            } else if (state.medattemptsRemaining === 0 && state.med_word !== medcurGuess.toUpperCase()) {\n                message = \"You failed to guess the word. End of Game.\";\n            }\n        }\n        if (hardcurGuess !== undefined) {\n            if (state.hard_word === hardcurGuess.toUpperCase()) {\n                message = \"Congratulations!  Would you like to try again?\";\n            } else if (state.hardattemptsRemaining === 0 && state.hard_word !== easycurGuess.toUpperCase()) {\n                message = \"You failed to guess the word. End of Game.\";\n            }\n        }\n       \n        return message;\n    } \n    \n    \n    const currentMessage = useSelector(createMessage, shallowEqual);\n\n    function getAttemptsRemaining(state) {\n        let attempts = \"\";\n\n        if (state.current_diff == \"EASY\"){\n            if (state.easyattemptsRemaining > 0) {\n                attempts = `Attempts Remaining: ${state.easyattemptsRemaining}`;\n            }\n        }\n        if (state.current_diff == \"MEDIUM\"){\n            if (state.medattemptsRemaining > 0) {\n                attempts = `Attempts Remaining: ${state.medattemptsRemaining}`;\n            }\n        }\n        if (state.current_diff == \"HARD\"){\n            if (state.hardattemptsRemaining > 0) {\n                attempts = `Attempts Remaining: ${state.hardattemptsRemaining}`;\n            }\n        }\n        return attempts;\n    }\n  \n    const attemptsRemaining = useSelector(getAttemptsRemaining, shallowEqual);\n\n    return(\n        <div className='text-container'> \n            <h2>Message Board: {currentMessage}</h2>\n            <h3>{attemptsRemaining}</h3>\n        </div>\n\n    );\n}"]},"metadata":{},"sourceType":"module"}
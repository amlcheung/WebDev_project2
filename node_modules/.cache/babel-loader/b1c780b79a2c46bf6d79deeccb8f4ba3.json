{"ast":null,"code":"// reducer to randomly select word?\nconst initState = {\n  word: null,\n  history: [] // word history array\n  // other values\n\n};\nconst max = 10;\nconst min = 0;\nexport function WordGeneratorReducer() {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === 'EASY') {\n    const easyWords = [\"Cable\", \"Faces\", \"Label\", \"Nacho\", \"Wacky\", \"Yacht\", \"Adult\", \"Grass\", \"Water\", \"Tower\"];\n    let randomIndexEasy = Math.floor(Math.random() * (max - min) + min);\n    console.log(easyWords[randomIndexEasy]);\n    return {\n      word: easyWords[randomIndexEasy]\n    };\n  }\n\n  if (action.type === 'MEDIUM') {\n    const medWords = [\"Acting\", \"Amount\", \"Became\", \"Belief\", \"Breath\", \"Design\", \"Doctor\", \"Enable\", \"Fabric\", \"Golden\"];\n    let randomIndexMedium = Math.floor(Math.random() * (max - min) + min);\n    console.log(medWords[randomIndexMedium]);\n    return {\n      word: medWords[randomIndexMedium]\n    };\n  }\n\n  if (action.type === 'HARD') {\n    const hardWords = [\"Fuzzier\", \"Drizzle\", \"Quibble\", \"Oxidize\", \"Tickbox\", \"Complex\", \"Squeeze\", \"Jumping\", \"Quickley\", \"Eagerly\"];\n    let randomIndexHard = Math.floor(Math.random() * (max - min) + min);\n    console.log(hardWords[randomIndexHard]);\n    return {\n      word: hardWords[randomIndexHard]\n    };\n  }\n\n  if (action.type === \"EVALUATE_WORD\") {\n    console.log(action.value.toString().length); //if (state.word.length === 5 && action.value.length === 5){\n\n    console.log(action.value);\n    return { ...state,\n      history: [state.history, action.value]\n    }; // }\n  }\n\n  return state;\n}\n_c = WordGeneratorReducer;\n\nvar _c;\n\n$RefreshReg$(_c, \"WordGeneratorReducer\");","map":{"version":3,"sources":["/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/reducer/WordGeneratorReducer.js"],"names":["initState","word","history","max","min","WordGeneratorReducer","state","action","type","easyWords","randomIndexEasy","Math","floor","random","console","log","medWords","randomIndexMedium","hardWords","randomIndexHard","value","toString","length"],"mappings":"AAAA;AAEA,MAAMA,SAAS,GAAG;AACdC,EAAAA,IAAI,EAAE,IADQ;AAEdC,EAAAA,OAAO,EAAE,EAFK,CAGd;AACA;;AAJc,CAAlB;AAOA,MAAMC,GAAG,GAAG,EAAZ;AACA,MAAMC,GAAG,GAAG,CAAZ;AAEA,OAAO,SAASC,oBAAT,GAAyD;AAAA,MAA3BC,KAA2B,uEAAnBN,SAAmB;AAAA,MAARO,MAAQ;;AAC5D,MAAIA,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AACxB,UAAMC,SAAS,GAAG,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,EAA4B,OAA5B,EAAqC,OAArC,EACH,OADG,EACM,OADN,EACe,OADf,EACwB,OADxB,EACiC,OADjC,CAAlB;AAGA,QAAIC,eAAe,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBV,GAAG,GAAGC,GAAvB,IAA8BA,GAAzC,CAAtB;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAYN,SAAS,CAACC,eAAD,CAArB;AAEA,WAAO;AACHT,MAAAA,IAAI,EAAEQ,SAAS,CAACC,eAAD;AADZ,KAAP;AAGH;;AAED,MAAIH,MAAM,CAACC,IAAP,KAAgB,QAApB,EAA8B;AAC1B,UAAMQ,QAAQ,GAAG,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,EAA+B,QAA/B,EAAyC,QAAzC,EACC,QADD,EACW,QADX,EACqB,QADrB,EAC+B,QAD/B,EACyC,QADzC,CAAjB;AAIA,QAAIC,iBAAiB,GAAGN,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBV,GAAG,GAAGC,GAAvB,IAA8BA,GAAzC,CAAxB;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAYC,QAAQ,CAACC,iBAAD,CAApB;AACA,WAAO;AACHhB,MAAAA,IAAI,EAAEe,QAAQ,CAACC,iBAAD;AADX,KAAP;AAGH;;AAGD,MAAIV,MAAM,CAACC,IAAP,KAAgB,MAApB,EAA4B;AACxB,UAAMU,SAAS,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,EACC,SADD,EACY,SADZ,EACuB,SADvB,EACkC,UADlC,EAC8C,SAD9C,CAAlB;AAGA,QAAIC,eAAe,GAAGR,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBV,GAAG,GAAGC,GAAvB,IAA8BA,GAAzC,CAAtB;AAEAU,IAAAA,OAAO,CAACC,GAAR,CAAYG,SAAS,CAACC,eAAD,CAArB;AAEA,WAAO;AACHlB,MAAAA,IAAI,EAAEiB,SAAS,CAACC,eAAD;AADZ,KAAP;AAIH;;AAED,MAAIZ,MAAM,CAACC,IAAP,KAAgB,eAApB,EAAqC;AACjCM,IAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACa,KAAP,CAAaC,QAAb,GAAwBC,MAApC,EADiC,CAEjC;;AACIR,IAAAA,OAAO,CAACC,GAAR,CAAYR,MAAM,CAACa,KAAnB;AACA,WAAO,EACH,GAAGd,KADA;AAEHJ,MAAAA,OAAO,EAAE,CAACI,KAAK,CAACJ,OAAP,EAAgBK,MAAM,CAACa,KAAvB;AAFN,KAAP,CAJ6B,CAQlC;AACF;;AAED,SAAOd,KAAP;AACH;KAtDeD,oB","sourcesContent":["// reducer to randomly select word?\n\nconst initState = {\n    word: null,\n    history: [],\n    // word history array\n    // other values\n}\n\nconst max = 10;\nconst min = 0;\n\nexport function WordGeneratorReducer(state = initState, action) {\n    if (action.type === 'EASY') {\n        const easyWords = [\"Cable\", \"Faces\", \"Label\", \"Nacho\", \"Wacky\", \n                       \"Yacht\", \"Adult\", \"Grass\", \"Water\", \"Tower\"];\n\n        let randomIndexEasy = Math.floor(Math.random() * (max - min) + min);\n\n        console.log(easyWords[randomIndexEasy]);\n\n        return {\n            word: easyWords[randomIndexEasy],\n        }\n    }\n\n    if (action.type === 'MEDIUM') {\n        const medWords = [\"Acting\", \"Amount\", \"Became\", \"Belief\", \"Breath\", \n                          \"Design\", \"Doctor\", \"Enable\", \"Fabric\", \"Golden\"];\n    \n\n        let randomIndexMedium = Math.floor(Math.random() * (max - min) + min);\n\n        console.log(medWords[randomIndexMedium]);\n        return {\n            word: medWords[randomIndexMedium],\n        }\n    }\n\n\n    if (action.type === 'HARD') {\n        const hardWords = [\"Fuzzier\", \"Drizzle\", \"Quibble\", \"Oxidize\", \"Tickbox\", \n                           \"Complex\", \"Squeeze\", \"Jumping\", \"Quickley\", \"Eagerly\"];\n\n        let randomIndexHard = Math.floor(Math.random() * (max - min) + min);\n\n        console.log(hardWords[randomIndexHard]);\n\n        return {\n            word: hardWords[randomIndexHard],\n        }\n\n    }\n\n    if (action.type === \"EVALUATE_WORD\") {\n        console.log(action.value.toString().length);\n        //if (state.word.length === 5 && action.value.length === 5){\n            console.log(action.value);\n            return {\n                ...state,\n                history: [state.history, action.value],\n            }\n       // }\n    }\n\n    return state;\n}\n\n"]},"metadata":{},"sourceType":"module"}
[{"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/index.js":"1","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Medium.jsx":"2","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Hard.jsx":"3","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Easy.jsx":"4","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/InputBox.jsx":"5","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/reducer/WordGeneratorReducer.js":"6","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/NavBar.jsx":"7","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/App.jsx":"8","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/MessageBoard.jsx":"9"},{"size":1184,"mtime":1649545633189,"results":"10","hashOfConfig":"11"},{"size":5588,"mtime":1649640301455,"results":"12","hashOfConfig":"11"},{"size":5579,"mtime":1649632613814,"results":"13","hashOfConfig":"11"},{"size":5577,"mtime":1649644778057,"results":"14","hashOfConfig":"11"},{"size":1254,"mtime":1649545633183,"results":"15","hashOfConfig":"11"},{"size":34432,"mtime":1649646777949,"results":"16","hashOfConfig":"11"},{"size":1427,"mtime":1649548298300,"results":"17","hashOfConfig":"11"},{"size":768,"mtime":1649550626860,"results":"18","hashOfConfig":"11"},{"size":1439,"mtime":1649644781991,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},"10l59w2",{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"23"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"23"},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","suppressedMessages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/index.js",[],[],["50","51"],"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Medium.jsx",["52","53","54","55","56","57","58"],[],"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Hard.jsx",["59","60","61","62","63","64","65"],[],"import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport MessageBoard from './MessageBoard';\n\nimport './Hard.css';\nimport Square from './Square';\nimport InputBox from'./InputBox';\n\nexport default function Hard(props) {\n    \n    const dispatch = useDispatch();\n\n    function getWord() {\n        const action = {\n            type: 'HARD',\n            attempts: 5,\n            // type: setDifficulty\n            // level: 'easy'\n        }\n        dispatch(action);\n    }\n\n    function getWordFromState(state) {\n        return state.word;\n    }\n\n    // Get Guess Array\n    function getWordFromHistory(state) {\n            return state.history;\n    }\n\n    //const currArray = getWordFromHistory();\n    //const [eachWord, setWord] = useState('');\n\n    // Function to check is the square should be yellow\n    function CheckYellow(goalWord, guessWord, letterIndexInGuess){\n        let countLetterInGuessWord = 0;\n        let countCorrectLetterInGuessWord = 0;\n        let indexesOfLetterInGuessWord = [];\n        let indexesOfLetterInGoalWord = [];\n        let countLetterInGoalWord = 0;\n        for (let index = 0; index < 5; index++){\n            if (guessWord[index] == guessWord[letterIndexInGuess]){\n                countLetterInGuessWord++;\n                indexesOfLetterInGuessWord.push(index);\n            }\n            if (goalWord[index] == guessWord[letterIndexInGuess]){\n                countLetterInGoalWord++;\n                indexesOfLetterInGoalWord.push(index);\n            }\n        }\n        // Count number of 'green' sqaures of given letter in given word\n        for (let correct = 0; correct < indexesOfLetterInGoalWord.length; correct++){\n            for (let lettGuess = 0; lettGuess < indexesOfLetterInGuessWord.length; lettGuess++){\n                if (indexesOfLetterInGoalWord[correct] == indexesOfLetterInGuessWord[lettGuess]){\n                    countCorrectLetterInGuessWord++;\n                }\n            }\n        }\n    \n       if (countLetterInGuessWord === countLetterInGoalWord){\n            return true;\n        } else {\n            // If the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n            for (let yellowBlock = 0; yellowBlock < (countLetterInGoalWord - countCorrectLetterInGuessWord); yellowBlock++){\n                if (letterIndexInGuess == indexesOfLetterInGuessWord[yellowBlock ]){\n                    return true;\n                }\n            }\n        }\n        // If letter from guess word isn't in goal word OR the number of 'green' of that letter in the guess is == to the number of that letter -> return false\n        return false;\n    }\n    const randomWord = useSelector(getWordFromState, shallowEqual);\n    const guessArray= useSelector(getWordFromHistory, shallowEqual);\n    const wordComponents = [];\n    // If the number of guesses is less than 5, add the guess\n    if (guessArray.length <= 5){\n        for (let i = 0; i < guessArray.length; i++){\n            const list = []\n            for (let j = 0; j < guessArray[i].length; j++){\n                if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n                    const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)){\n                    const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else {\n                    const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                }\n            }\n            wordComponents.push(list);\n        }\n    // User tries to guess more than 5 times, nothing happens\n    } else {\n        for (let i = 0; i < 5; i++){\n            const list = []\n            for (let j = 0; j < guessArray[i].length; j++){\n                if (guessArray[i].toUpperCase().charAt(j) == randomWord.charAt(j)){\n                    const component = <Square color='green' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else if (CheckYellow(randomWord, guessArray[i].toUpperCase(), j)){\n                    const component = <Square color='yellow' letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                } else {\n                    const component = <Square color='white'letter={guessArray[i].toUpperCase().charAt(j)} ></Square>\n                    list.push(component);\n                }\n            }\n            wordComponents.push(list);\n        }\n    }\n\n    for (let z = 0; z < 5 - guessArray.length; z++){\n        const blankList = []\n            for (let j = 0; j < 7; j++){\n                const component = <Square color=\"black\"></Square>\n                blankList.push(component);\n            }\n            wordComponents.push(blankList);\n    } \n\n    return(\n        <div>\n            <h1>Hard</h1>\n            <div className=\"game-contents-container\">\n                <button className=\"button-style\" onClick={getWord}>Start Game</button>\n                <MessageBoard></MessageBoard>\n                <InputBox></InputBox>\n                <div id=\"hard-board-container\">\n                    {wordComponents}\n                </div>\n            </div>\n    </div>\n    );\n}","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/Easy.jsx",["66","67","68","69","70","71","72"],[],"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/InputBox.jsx",["73","74","75","76"],[],"import React, { useState } from 'react';\nimport { useSelector, shallowEqual, useDispatch} from 'react-redux';\nimport './InputBox.css';\n\n\nexport default function InputBox(props) {\n    const [candidate, setCandidate] = useState(\"\");\n    const [input, setInputBox] = useState(\"\");\n\n    const dispatch = useDispatch();\n\n    function sendWordToHistory() {\n        const action = {\n            type: 'EVALUATE_WORD',\n            value: candidate,\n        }\n\n        dispatch(action);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        console.log(\"userGuess: \" + candidate);\n        sendWordToHistory();\n        const guessInput = document.getElementById('guess');\n        guessInput.value = '';\n    }\n  \n    return (\n        <div>\n            <form onSubmit={e => {handleSubmit(e)}}>\n                    <div className=\"text\">\n                        Enter Word:\n                        </div>\n                        <input \n                            type=\"text\"\n                            id = \"guess\"\n                            onChange={(e) => setCandidate(e.target.value.trim())}\n                        ></input>\n                    <input type=\"submit\" value=\"Submit\"></input>\n            </form>\n        </div>\n    );\n}\n\n","/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/reducer/WordGeneratorReducer.js",["77","78"],[],"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/NavBar.jsx",["79","80","81","82"],[],"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/App.jsx",["83","84"],[],"/Users/madeleinevanzuylen/Desktop/WebDev_project2/src/component/MessageBoard.jsx",[],[],{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","severity":1,"message":"90","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":43,"column":34,"nodeType":"95","messageId":"96","endLine":43,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":47,"column":33,"nodeType":"95","messageId":"96","endLine":47,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":55,"column":56,"nodeType":"95","messageId":"96","endLine":55,"endColumn":58},{"ruleId":"93","severity":1,"message":"94","line":66,"column":40,"nodeType":"95","messageId":"96","endLine":66,"endColumn":42},{"ruleId":"93","severity":1,"message":"94","line":82,"column":59,"nodeType":"95","messageId":"96","endLine":82,"endColumn":61},{"ruleId":"93","severity":1,"message":"94","line":100,"column":59,"nodeType":"95","messageId":"96","endLine":100,"endColumn":61},{"ruleId":"89","severity":1,"message":"90","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":44,"column":34,"nodeType":"95","messageId":"96","endLine":44,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":48,"column":33,"nodeType":"95","messageId":"96","endLine":48,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":56,"column":56,"nodeType":"95","messageId":"96","endLine":56,"endColumn":58},{"ruleId":"93","severity":1,"message":"94","line":67,"column":40,"nodeType":"95","messageId":"96","endLine":67,"endColumn":42},{"ruleId":"93","severity":1,"message":"94","line":83,"column":59,"nodeType":"95","messageId":"96","endLine":83,"endColumn":61},{"ruleId":"93","severity":1,"message":"94","line":101,"column":59,"nodeType":"95","messageId":"96","endLine":101,"endColumn":61},{"ruleId":"89","severity":1,"message":"90","line":1,"column":17,"nodeType":"91","messageId":"92","endLine":1,"endColumn":25},{"ruleId":"93","severity":1,"message":"94","line":43,"column":34,"nodeType":"95","messageId":"96","endLine":43,"endColumn":36},{"ruleId":"93","severity":1,"message":"94","line":47,"column":33,"nodeType":"95","messageId":"96","endLine":47,"endColumn":35},{"ruleId":"93","severity":1,"message":"94","line":55,"column":56,"nodeType":"95","messageId":"96","endLine":55,"endColumn":58},{"ruleId":"93","severity":1,"message":"94","line":66,"column":40,"nodeType":"95","messageId":"96","endLine":66,"endColumn":42},{"ruleId":"93","severity":1,"message":"94","line":82,"column":59,"nodeType":"95","messageId":"96","endLine":82,"endColumn":61},{"ruleId":"93","severity":1,"message":"94","line":100,"column":59,"nodeType":"95","messageId":"96","endLine":100,"endColumn":61},{"ruleId":"89","severity":1,"message":"97","line":2,"column":10,"nodeType":"91","messageId":"92","endLine":2,"endColumn":21},{"ruleId":"89","severity":1,"message":"98","line":2,"column":23,"nodeType":"91","messageId":"92","endLine":2,"endColumn":35},{"ruleId":"89","severity":1,"message":"99","line":8,"column":12,"nodeType":"91","messageId":"92","endLine":8,"endColumn":17},{"ruleId":"89","severity":1,"message":"100","line":8,"column":19,"nodeType":"91","messageId":"92","endLine":8,"endColumn":30},{"ruleId":"101","severity":1,"message":"102","line":141,"column":16,"nodeType":"103","messageId":"104","endLine":141,"endColumn":17,"fix":"105"},{"ruleId":"106","severity":1,"message":"107","line":147,"column":5,"nodeType":"108","messageId":"109","endLine":147,"endColumn":18},{"ruleId":"89","severity":1,"message":"90","line":1,"column":15,"nodeType":"91","messageId":"92","endLine":1,"endColumn":23},{"ruleId":"89","severity":1,"message":"110","line":3,"column":10,"nodeType":"91","messageId":"92","endLine":3,"endColumn":21},{"ruleId":"89","severity":1,"message":"98","line":3,"column":23,"nodeType":"91","messageId":"92","endLine":3,"endColumn":35},{"ruleId":"89","severity":1,"message":"111","line":5,"column":8,"nodeType":"91","messageId":"92","endLine":5,"endColumn":11},{"ruleId":"93","severity":1,"message":"94","line":10,"column":15,"nodeType":"95","messageId":"96","endLine":10,"endColumn":17},{"ruleId":"93","severity":1,"message":"94","line":13,"column":21,"nodeType":"95","messageId":"96","endLine":13,"endColumn":23},"no-native-reassign",["112"],"no-negated-in-lhs",["113"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useSelector' is defined but never used.","'shallowEqual' is defined but never used.","'input' is assigned a value but never used.","'setInputBox' is assigned a value but never used.","rest-spread-spacing","Unexpected whitespace after spread property operator.","SpreadElement","unexpectedWhitespace",{"range":"114","text":"115"},"no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'useDispatch' is defined but never used.","'App' is defined but never used.","no-global-assign","no-unsafe-negation",[4056,4057],""]